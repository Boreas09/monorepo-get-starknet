{"version":3,"sources":["../src/discovery/evm-wallets.ts","../src/wallet-standard/evm-injected-wallet.ts","../src/wallet-standard/features.ts","../src/utils/validateCallParams.ts","../src/types/index.ts"],"sourcesContent":["import { StarknetWindowObject } from '@starknet-io/types-js';\nimport { createStore } from 'mipd';\nimport { EthereumProvider } from '../types';\nimport { EthereumInjectedWallet } from '../wallet-standard/evm-injected-wallet';\n\nexport async function EvmWindowObjectWithStarknetKeys() {\n  let Wallets = [];\n\n  const store = createStore();\n\n  const providers = store.getProviders();\n\n\n  for (const wallet of providers) {\n    if (wallet.info.rdns === 'com.bitget.web3') {\n      wallet.info.name = 'Bitget Wallet via Rosettanet';\n    } else if (wallet.info.rdns === 'com.okex.wallet') {\n      wallet.info.name = 'OKX Wallet via Rosettanet';\n    }\n\n    const walletWithStarknetKeys = {\n      ...wallet.provider,\n      id: wallet.info.name,\n      name: wallet.info.name,\n      icon: wallet.info.icon,\n      version: \"1.0.0\",\n      on: wallet.provider.on,\n      off: wallet.provider.removeListener,\n    } as StarknetWindowObject;\n\n    Wallets.push(new EthereumInjectedWallet(walletWithStarknetKeys));\n  }\n\n  return Wallets;\n}\n\nconst ETHEREUM_WALLET_KEYS = ['sendAsync', 'send', 'request'];\n\nexport function isEthereumWindowObject(wallet: unknown): wallet is EthereumProvider {\n  if (typeof wallet !== 'object' || wallet === null) return false;\n  return ETHEREUM_WALLET_KEYS.every((key) => key in wallet);\n}\n","import type { Wallet, WalletAccount, WalletWithFeatures } from '@wallet-standard/base';\nimport {\n  StandardConnect,\n  type StandardConnectMethod,\n  StandardDisconnect,\n  type StandardDisconnectMethod,\n  StandardEvents,\n  type StandardEventsOnMethod,\n  type StandardEventsNames,\n  type StandardEventsListeners,\n} from '@wallet-standard/features';\nimport {\n  RequestFn,\n  StarknetWindowObject,\n  RpcTypeToMessageMap,\n  RpcMessage,\n  RequestFnCall,\n} from '@starknet-io/types-js';\nimport {\n  EthereumWalletWithStarknetFeatures,\n  StarknetFeatures,\n  StarknetWalletApi,\n} from './features';\nimport { StarknetChain, EthereumChain } from '../types';\nimport { hash } from 'starknet';\nimport { prepareMulticallCalldata } from 'rosettanet';\nimport { validateCallParams } from '../utils/validateCallParams';\n\nconst walletToEthereumRpcMap: Record<keyof RpcTypeToMessageMap, string | undefined> = {\n  wallet_getPermissions: undefined,\n  wallet_requestAccounts: 'eth_requestAccounts',\n  wallet_watchAsset: 'wallet_watchAsset',\n  wallet_addStarknetChain: undefined,\n  wallet_switchStarknetChain: undefined,\n  wallet_requestChainId: 'eth_chainId',\n  wallet_deploymentData: undefined,\n  wallet_addInvokeTransaction: 'eth_sendTransaction',\n  wallet_addDeclareTransaction: undefined,\n  wallet_signTypedData: 'eth_signTypedData_v4',\n  wallet_supportedSpecs: undefined,\n  wallet_supportedWalletApi: undefined,\n};\n\n/**\n * Implementation of the Wallet Standard for Ethereum/EVM wallets\n */\nexport class EthereumInjectedWallet implements EthereumWalletWithStarknetFeatures {\n  #listeners: { [E in StandardEventsNames]?: StandardEventsListeners[E][] } = {};\n  #account: { address: string; chain: EthereumChain } | null = null;\n\n  constructor(private readonly injected: StarknetWindowObject) {\n    this.injected.on('accountsChanged', this.#onAccountsChanged.bind(this));\n    this.injected.on('networkChanged', this.#onNetworkChanged.bind(this));\n  }\n\n  get version() {\n    return '1.0.0' as const;\n  }\n\n  get name() {\n    return this.injected.name;\n  }\n\n  get icon() {\n    return this.injected.icon as Wallet['icon'];\n  }\n\n  get features(): StarknetFeatures {\n    return {\n      [StandardConnect]: {\n        version: '1.0.0' as const,\n        connect: this.#connect.bind(this),\n      },\n      [StandardDisconnect]: {\n        version: '1.0.0' as const,\n        disconnect: this.#disconnect.bind(this),\n      },\n      [StandardEvents]: {\n        version: '1.0.0' as const,\n        on: this.#on.bind(this),\n      },\n      [StarknetWalletApi]: {\n        version: '1.0.0' as const,\n        request: this.#request.bind(this),\n        walletVersion: this.injected.version,\n      },\n    };\n  }\n\n  get chains() {\n    return [\n      'eip155:1381192787', // Rosettanet Chain ID\n    ] as EthereumChain[];\n  }\n\n  get accounts(): WalletAccount[] {\n    if (this.#account) {\n      return [\n        {\n          address: this.#account.address,\n          publicKey: new Uint8Array(),\n          chains: [this.#account.chain],\n          features: [],\n        },\n      ];\n    }\n\n    return [];\n  }\n\n  #connect: StandardConnectMethod = async () => {\n    if (!this.#account) {\n      const accounts = await this.#request({\n        type: 'wallet_requestAccounts',\n      });\n\n      // User rejected the request.\n      if (accounts.length === 0) {\n        return { accounts: [] };\n      }\n\n      await this.#updateAccount(accounts);\n    }\n\n    return { accounts: this.accounts };\n  };\n\n  #disconnect: StandardDisconnectMethod = async () => {\n    // Most EVM wallets don't have a disconnect method\n    // We'll just clear our internal state\n    this.#disconnected();\n    return;\n  };\n\n  #on: StandardEventsOnMethod = (event, listener) => {\n    if (!this.#listeners[event]) {\n      this.#listeners[event] = [];\n    }\n\n    this.#listeners[event].push(listener);\n\n    return (): void => this.#off(event, listener);\n  };\n\n  #emit<E extends StandardEventsNames>(\n    event: E,\n    ...args: Parameters<StandardEventsListeners[E]>\n  ): void {\n    if (!this.#listeners[event]) return;\n\n    for (const listener of this.#listeners[event]) {\n      listener.apply(null, args);\n    }\n  }\n\n  #off<E extends StandardEventsNames>(event: E, listener: StandardEventsListeners[E]): void {\n    this.#listeners[event] = this.#listeners[event]?.filter(\n      (existingListener) => listener !== existingListener\n    );\n  }\n\n  #disconnected() {\n    if (this.#account) {\n      this.#account = null;\n      this.#emit('change', { accounts: this.accounts });\n    }\n  }\n\n  async #onAccountsChanged(accounts: string[] | undefined) {\n    if (!accounts || accounts.length === 0) {\n      this.#disconnected();\n      return;\n    }\n\n    if (!this.#account) {\n      return;\n    }\n\n    await this.#updateAccount(accounts);\n  }\n\n  #onNetworkChanged(chainIdHex: string | undefined) {\n    if (!chainIdHex || !this.#account) {\n      this.#disconnected();\n      return;\n    }\n\n    // Convert hex chainId to decimal\n    const chainId = Number.parseInt(chainIdHex, 16).toString();\n    const chain = `eip155:${chainId}` as EthereumChain;\n\n    // Check if this is a supported chain\n    if (!this.chains.includes(chain)) {\n      console.warn('Switched to unsupported chain:', chain);\n    }\n\n    this.#account.chain = chain;\n    this.#emit('change', { accounts: this.accounts });\n  }\n\n  async #updateAccount(accounts: string[]) {\n    if (accounts.length === 0) {\n      return;\n    }\n\n    const [account] = accounts;\n\n    if (this.#account?.chain) {\n      // Only account changed, chain remains the same\n      this.#account.address = account;\n      this.#emit('change', { accounts: this.accounts });\n    } else {\n      // Need to get the chain ID too\n      const chain = await this.#getEthereumChain();\n      this.#account = { address: account, chain };\n      this.#emit('change', { accounts: this.accounts });\n    }\n  }\n\n  #request = async <T extends RpcMessage['type']>(\n    call: RequestFnCall<T>\n  ): Promise<RpcTypeToMessageMap[T]['result']> => {\n    const mappedMethod = walletToEthereumRpcMap[call.type];\n\n    if (!mappedMethod) {\n      throw new Error(`Unsupported request type: ${call.type}`);\n    }\n\n    if (mappedMethod === 'eth_sendTransaction' && call.params) {\n      if (validateCallParams(call.params) === false) {\n        throw new Error('Invalid call parameter. Expected an array of objects. Rosettanet only supports multicall.');\n      }\n\n      const arrayCalls: [string, string, string[]][] = call.params.map((item) => [\n        item.contractAddress,\n        item.entrypoint,\n        item.calldata,\n      ]);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const txCalls = [].concat(arrayCalls as any).map((it) => {\n        const entryPointValue = it[1] as string;\n        const entryPoint = entryPointValue.startsWith('0x')\n          ? entryPointValue\n          : hash.getSelectorFromName(entryPointValue);\n\n        return {\n          contract_address: it[0],\n          entry_point: entryPoint,\n          calldata: it[2],\n        };\n      });\n\n      const params = {\n        calls: txCalls,\n      };\n\n      const txData = prepareMulticallCalldata(params.calls);\n\n      const txObject = {\n        from: this.#account?.address,\n        to: '0x0000000000000000000000004645415455524553',\n        data: txData,\n        value: '0x0',\n      };\n\n      const ethPayload = {\n        method: mappedMethod,\n        params: [txObject],\n      };\n\n      return (this.injected.request as any)(ethPayload);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (this.injected.request as any)({ method: mappedMethod, params: call.params ? [call.params] : [] });\n  };\n\n  async #getEthereumChain(): Promise<EthereumChain> {\n    const chainIdHex = await this.#request({\n      type: 'wallet_requestChainId',\n    });\n    // Convert hex to decimal\n    const chainId = Number.parseInt(chainIdHex, 16).toString();\n    const chain = `eip155:${chainId}` as EthereumChain;\n\n    // Check if the chain is rosettanet chain\n    if (chainId !== '1381192787') {\n      throw new Error('Invalid Rosettanet chain');\n    }\n\n    return chain;\n  }\n}\n","import type { Wallet } from '@wallet-standard/base';\nimport {\n  StandardConnect,\n  StandardDisconnect,\n  StandardEvents,\n  type StandardEventsFeature,\n  type StandardDisconnectFeature,\n  type StandardConnectFeature,\n} from '@wallet-standard/features';\nimport { RequestFn } from '@starknet-io/types-js';\nimport { WalletWithFeatures } from '@wallet-standard/base';\n\nexport const StarknetWalletApi = 'starknet:walletApi';\n\nexport type StarknetWalletApiVersion = '1.0.0';\n\nexport type StarknetWalletRequestFeature = {\n  readonly [StarknetWalletApi]: {\n    readonly version: StarknetWalletApiVersion;\n    readonly request: RequestFn;\n    readonly walletVersion: string;\n  };\n};\n\nexport type StarknetFeatures = StarknetWalletRequestFeature &\n  StandardConnectFeature &\n  StandardDisconnectFeature &\n  StandardEventsFeature;\nexport type EthereumWalletWithStarknetFeatures = WalletWithFeatures<StarknetFeatures>;\n\nconst RequiredStarknetFeatures = [\n  StarknetWalletApi,\n  StandardConnect,\n  StandardDisconnect,\n  StandardEvents,\n] as const satisfies (keyof StarknetFeatures)[];\n\nexport function isEVMWallet(wallet: Wallet): wallet is EthereumWalletWithStarknetFeatures {\n  const result = RequiredStarknetFeatures.every((feature) => feature in wallet.features);\n  return result;\n}\n","interface CallObject {\r\n    contractAddress: string;\r\n    entrypoint: string;\r\n    calldata: string[];\r\n}\r\n\r\nexport const validateCallParams = (value: any): value is CallObject[] => {\r\n    return Array.isArray(value) && value.every(item =>\r\n        typeof item === 'object' &&\r\n        item !== null &&\r\n        !Array.isArray(item) &&\r\n        'contractAddress' in item &&\r\n        'entrypoint' in item &&\r\n        'calldata' in item\r\n    );\r\n};","export interface EthereumProvider {\n  //eslint-disable-next-line @typescript-eslint/no-explicit-any\n  request(): Promise<any>;\n  id: string;\n  name: string;\n  icon: string;\n  version: string;\n  on: <T extends string>(eventName: T, listener: (...args: unknown[]) => void) => void;\n  off: <T extends string>(eventName: T, listener: (...args: unknown[]) => void) => void;\n}\n\nexport const ETHEREUM_CHAIN_PREFIX = 'eip155:';\n\nexport const STARKNET_CHAIN_PREFIX = 'starknet:';\n\nexport type ChainId = `0x${string}`;\n\nexport type EthereumChain = `${typeof ETHEREUM_CHAIN_PREFIX}${string}`;\n\nexport type StarknetChain = `${typeof STARKNET_CHAIN_PREFIX}${ChainId}`;\n"],"mappings":"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","names":["StandardConnect","StandardDisconnect","StandardEvents","StandardConnect","StandardDisconnect","StandardEvents"]}